C51 COMPILER V9.60.7.0   MATH_SENSOR                                                       10/31/2023 20:05:43 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MATH_SENSOR
OBJECT MODULE PLACED IN .\Objects\math_sensor.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE math_sensor.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Firmware) DEBUG PR
                    -INT(.\Listings\math_sensor.lst) TABS(2) OBJECT(.\Objects\math_sensor.obj)

line level    source

   1          /*************************************************************************
   2            > File Name: math_sensor.c
   3            > Author: ma6174
   4            > Mail: ma6174@163.com 
   5            > Created Time: 2023/10/26 16:34:28
   6           ************************************************************************/
   7          
   8          #include "math_sensor.h"
   9          #include "stdlib.h"
  10          #include "string.h"
  11          #include <stdio.h>
  12          
  13          void adc_calculation_calibration_once(void *input_value, void *output_value,
  14                                                uint8_t enable_flag)
  15          {
  16   1          uint8_t count_x = 0, count_y = 0;
  17   1          uint32_t adc_value_2 = 0;
  18   1          uint16_t adc_total_vcc_value[SENSOR_POS_Y] = {0};
  19   1      
  20   1          if(input_value == NULL) return;
  21   1          if(output_value == NULL) return;
  22   1      
  23   1      
  24   1          for (count_y = 0; count_y < SENSOR_POS_Y; count_y ++)
  25   1          {
  26   2              for (count_x = 0; count_x < SENSOR_POS_X; count_x ++)
  27   2              {
  28   3                  adc_total_vcc_value[count_y] += ((uint16_t (*)[SENSOR_POS_Y])input_value)[count_x][count_y];
  29   3              }
  30   2      
  31   2              if (adc_total_vcc_value[count_y] >=  MAX_ADC_VALUE)
  32   2                  adc_total_vcc_value[count_y] = MAX_ADC_VALUE; 
  33   2          }
  34   1      
  35   1          for (count_y = 0; count_y < SENSOR_POS_Y; count_y ++)
  36   1          {
  37   2              for (count_x = 0; count_x < SENSOR_POS_X; count_x ++)
  38   2              {
  39   3                  adc_value_2 = ((uint16_t (*)[SENSOR_POS_Y])input_value)[count_x][count_y];
  40   3                  if (adc_value_2 < 1) {
  41   4                      ((uint16_t (*)[SENSOR_POS_Y])output_value)[count_x][count_y] = 0;
  42   4                  } else {
  43   4                      if(enable_flag)
  44   4                      {
  45   5                          ((uint16_t (*)[SENSOR_POS_Y])output_value)[count_x][count_y]
  46   5                              = 255 * adc_value_2 / (MAX_ADC_VALUE - (adc_total_vcc_value[count_y] - adc_value_2
             -));
  47   5                      } else {
  48   5                          ((uint16_t (*)[SENSOR_POS_Y])output_value)[count_x][count_y] = ((uint16_t (*)[SENSOR_P
             -OS_Y])input_value)[count_x][count_y] / 4;
  49   5                      }
  50   4                  }
  51   3              }
  52   2          }
C51 COMPILER V9.60.7.0   MATH_SENSOR                                                       10/31/2023 20:05:43 PAGE 2   

  53   1      
  54   1      }
  55          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    450    ----
   CONSTANT SIZE    =      8    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      21
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
